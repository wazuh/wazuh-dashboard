name: Manual build Wazuh dashboard with plugins

on:
  workflow_dispatch:
    inputs:
      system:
        type: choice
        description: 'Package OS'
        required: true
        options:
          - deb
          - rpm
        default: 'deb'
      architecture:
        description: 'Architecture (amd64 or arm64)'
        required: true
        default: 'amd64'
      revision:
        type: string
        description: 'Package revision'
        required: true
        default: '1'
      reference_dashboard:
        type: string
        description: 'Branch/tag of wazuh-dashboard repo. If empty, uses the branch this workflow is on.'
        required: false # Сделали необязательным
      reference_security_plugins:
        type: string
        description: 'Branch/tag/commit of wazuh-security-dashboards-plugin. If empty, uses master.'
        required: false
      reference_wazuh_plugins:
        type: string
        description: 'Branch/tag/commit of wazuh-dashboard-plugins. If empty, uses master.'
        required: false

jobs:
  prepare-refs:
    runs-on: ubuntu-latest
    name: Prepare References
    outputs:
      dashboard_ref: ${{ steps.set-refs.outputs.dashboard_ref }}
      wazuh_plugins_ref: ${{ steps.set-refs.outputs.wazuh_plugins_ref }}
      security_plugins_ref: ${{ steps.set-refs.outputs.security_plugins_ref }}
    steps:
      - name: Set effective refs
        id: set-refs
        run: |
          echo "dashboard_ref=${{ inputs.reference_dashboard || github.ref_name }}" >> $GITHUB_OUTPUT
          echo "wazuh_plugins_ref=${{ inputs.reference_wazuh_plugins || 'master' }}" >> $GITHUB_OUTPUT
          echo "security_plugins_ref=${{ inputs.reference_security_plugins || 'master' }}" >> $GITHUB_OUTPUT
          
  setup-variables:
    needs: prepare-refs # Зависит от задачи, определяющей ветки
    runs-on: ubuntu-latest
    name: Setup all variables reliably
    # Объявляем ВСЕ outputs, которые мы будем создавать
    outputs:
    
      COMMIT_SHA: ${{ steps.export-vars.outputs.COMMIT_SHA }}
      CURRENT_DIR: ${{ steps.export-vars.outputs.CURRENT_DIR }}
      PLUGINS_SHA: ${{ steps.export-vars.outputs.PLUGINS_SHA }}
      SECURITY_SHA: ${{ steps.export-vars.outputs.SECURITY_SHA }}
      PACKAGE_NAME: ${{ steps.export-vars.outputs.PACKAGE_NAME }}
      WAZUH_DASHBOARD_SLIM: ${{ steps.export-vars.outputs.WAZUH_DASHBOARD_SLIM }}
      WAZUH_SECURITY_PLUGIN: ${{ steps.export-vars.outputs.WAZUH_SECURITY_PLUGIN }}
      WAZUH_PLUGINS_WAZUH: ${{ steps.export-vars.outputs.WAZUH_PLUGINS_WAZUH }}
      WAZUH_PLUGINS_CORE: ${{ steps.export-vars.outputs.WAZUH_PLUGINS_CORE }}
      WAZUH_PLUGINS_CHECK_UPDATES: ${{ steps.export-vars.outputs.WAZUH_PLUGINS_CHECK_UPDATES }}
      ARCHITECTURE_FLAG: ${{ steps.export-vars.outputs.ARCHITECTURE_FLAG }}
      PRODUCTION: ${{ steps.export-vars.outputs.PRODUCTION }}

    steps:
      - name: Checkout ALL source repositories
        uses: actions/checkout@v4
        with:
          repository: ivmerk/wazuh-dashboard
          ref: ${{ needs.prepare-refs.outputs.dashboard_ref }}
          path: ./wazuh-dashboard

      - uses: actions/checkout@v4
        with:
          repository: ivmerk/wazuh-dashboard-plugins
          ref: ${{ needs.prepare-refs.outputs.wazuh_plugins_ref }}
          path: ./wazuh-dashboard-plugins

      - uses: actions/checkout@v4
        with:
          repository: ivmerk/wazuh-security-dashboards-plugin
          ref: ${{ needs.prepare-refs.outputs.security_plugins_ref }}
          path: ./wazuh-security-plugin
      
      # Этот шаг будет вычислять ВСЕ переменные и экспортировать их.
      - name: Calculate and Export All Variables
        id: export-vars
        run: |
          # set -e заставит скрипт упасть, если какая-то команда не сработает
          set -e

          echo "--- Calculating all variables ---"
          CURRENT_DIR="${GITHUB_WORKSPACE}"
          echo "CURRENT_DIR=$CURRENT_DIR" >> $GITHUB_OUTPUT
          
          # --- Получаем SHAs ---
          COMMIT_SHA=$(cd ./wazuh-dashboard && git rev-parse --short HEAD)
          PLUGINS_SHA=$(cd ./wazuh-dashboard-plugins && git rev-parse --short HEAD)
          SECURITY_SHA=$(cd ./wazuh-security-plugin && git rev-parse --short HEAD)

          echo "Current Dir: $CURRENT_DIR"
          echo "Dashboard SHA: $COMMIT_SHA"
          echo "Plugins SHA: $PLUGINS_SHA"
          echo "Security SHA: $SECURITY_SHA"
          
          # --- Получаем версии из файлов ---
          DASHBOARD_VERSION=$(jq -r '.version' ./wazuh-dashboard/VERSION.json)
          DASHBOARD_REVISION=$(jq -r '.stage' ./wazuh-dashboard/VERSION.json)
          SECURITY_PLUGIN_VERSION=$(jq -r '.wazuh.version' ./wazuh-security-plugin/package.json)
          SECURITY_PLUGIN_REVISION=$(jq -r '.wazuh.revision' ./wazuh-security-plugin/package.json)
          MAIN_PLUGINS_VERSION=$(jq -r '.version' ./wazuh-dashboard-plugins/plugins/main/package.json)
          MAIN_PLUGINS_REVISION=$(jq -r '.revision' ./wazuh-dashboard-plugins/plugins/main/package.json)

          # --- Рассчитываем имена артефактов ---
          ARCH_SHORT=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "x64" || echo "arm64")
          SECURITY_PLUGIN_REF=$(echo ${{ needs.prepare-refs.outputs.security_plugins_ref }} | sed 's/\//-/g')
          MAIN_PLUGINS_REF=$(echo ${{ needs.prepare-refs.outputs.wazuh_plugins_ref }} | sed 's/\//-/g')

          WAZUH_DASHBOARD_SLIM="wazuh-dashboard_${DASHBOARD_VERSION}-${DASHBOARD_REVISION}_${ARCH_SHORT}.tar.gz"
          WAZUH_SECURITY_PLUGIN="wazuh-security-dashboards-plugin_${SECURITY_PLUGIN_VERSION}-${SECURITY_PLUGIN_REVISION}_${SECURITY_PLUGIN_REF}.zip"
          WAZUH_PLUGINS_WAZUH="wazuh-dashboard-plugins_wazuh_${MAIN_PLUGINS_VERSION}-${MAIN_PLUGINS_REVISION}_${MAIN_PLUGINS_REF}.zip"
          WAZUH_PLUGINS_CORE="wazuh-dashboard-plugins_wazuh-core_${MAIN_PLUGINS_VERSION}-${MAIN_PLUGINS_REVISION}_${MAIN_PLUGINS_REF}.zip"
          WAZUH_PLUGINS_CHECK_UPDATES="wazuh-dashboard-plugins_wazuh-check-updates_${MAIN_PLUGINS_VERSION}-${MAIN_PLUGINS_REVISION}_${MAIN_PLUGINS_REF}.zip"

          # --- Рассчитываем имя финального пакета (PACKAGE_NAME) ---
          if [ "${{ inputs.system }}" = "deb" ]; then
            if [ "${{ inputs.is_stage }}" = "true" ]; then
              PACKAGE_NAME="wazuh-dashboard_${DASHBOARD_VERSION}-${{ inputs.revision }}_${{ inputs.architecture }}.deb"
            else
              PACKAGE_NAME="wazuh-dashboard_${DASHBOARD_VERSION}-${{ inputs.revision }}_${{ inputs.architecture }}_${COMMIT_SHA}-${PLUGINS_SHA}-${SECURITY_SHA}.deb"
            fi
          else # rpm
            if [ "${{ inputs.is_stage }}" = "true" ]; then
              PACKAGE_NAME="wazuh-dashboard-${DASHBOARD_VERSION}-${{ inputs.revision }}.${{ inputs.architecture }}.rpm"
            else
              PACKAGE_NAME="wazuh-dashboard_${DASHBOARD_VERSION}-${{ inputs.revision }}_${{ inputs.architecture }}_${COMMIT_SHA}-${PLUGINS_SHA}-${SECURITY_SHA}.rpm"
            fi
          fi
          
          # --- Рассчитываем флаги ---
          if [[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]]; then
            ARCHITECTURE_FLAG=""
          else
            ARCHITECTURE_FLAG="--arm"
          fi
          
          if [ "${{ inputs.is_stage }}" = "true" ]; then
            PRODUCTION="--production"
          else
            PRODUCTION=""
          fi

          # --- Выводим все переменные в GITHUB_OUTPUT ---
          echo "--- Exporting all variables to outputs ---"
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "PLUGINS_SHA=$PLUGINS_SHA" >> $GITHUB_OUTPUT
          echo "SECURITY_SHA=$SECURITY_SHA" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "WAZUH_DASHBOARD_SLIM=$WAZUH_DASHBOARD_SLIM" >> $GITHUB_OUTPUT
          echo "WAZUH_SECURITY_PLUGIN=$WAZUH_SECURITY_PLUGIN" >> $GITHUB_OUTPUT
          echo "WAZUH_PLUGINS_WAZUH=$WAZUH_PLUGINS_WAZUH" >> $GITHUB_OUTPUT
          echo "WAZUH_PLUGINS_CORE=$WAZUH_PLUGINS_CORE" >> $GITHUB_OUTPUT
          echo "WAZUH_PLUGINS_CHECK_UPDATES=$WAZUH_PLUGINS_CHECK_UPDATES" >> $GITHUB_OUTPUT
          echo "ARCHITECTURE_FLAG=$ARCHITECTURE_FLAG" >> $GITHUB_OUTPUT
          echo "PRODUCTION=$PRODUCTION" >> $GITHUB_OUTPUT
  check-condition:
    needs: setup-variables
    runs-on: ubuntu-latest
    name: Run echo
    steps:
      - name: Print context info
        run: |
          echo "Architecture: ${{ inputs.architecture }}"
          echo "System: ${{ inputs.system }}"
          echo "WAZUH_DASHBOARD_SLIM ${{ needs.setup-variables.outputs.WAZUH_DASHBOARD_SLIM }}"
          echo "WAZUH_SECURITY_PLUGIN ${{ needs.setup-variables.outputs.WAZUH_SECURITY_PLUGIN }}"

      - name: List artifacts directory
        run: |
          echo "::group::Contents of artifacts/"
          if [ -d "artifacts" ]; then
            ls -al artifacts
          else
            echo "Directory 'artifacts' does not exist."
          fi
          pwd
          ls -al
          cd ..
          ls -al
          cd ..
          ls -al
          cd ..
          ls -al
          echo "::endgroup::"
          
  build-base:
    needs: [prepare-refs, setup-variables]
    runs-on: ubuntu-latest
    name: Build dashboard base
    defaults:
      run:
        working-directory: ./artifacts # Устанавливаем рабочую директорию для всех шагов run
    outputs:
      artifact_name: ${{ steps.export-name.outputs.value }}
    steps:
      # ШАГ 1: Checkout (из reusable workflow)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ivmerk/wazuh-dashboard
          path: ./artifacts # Клонируем в поддиректорию
          ref: ${{ needs.prepare-refs.outputs.dashboard_ref }} # Используем динамическую ветку

      # ШАГ 2: Setup Node (из reusable workflow)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: './artifacts/.nvmrc' # Путь к файлу теперь включает поддиректорию
          registry-url: 'https://registry.npmjs.org'

      # ШАГ 3: Setup Yarn (из reusable workflow)
      - name: Setup Yarn
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10
          yarn config set network-timeout 1000000 -g

      # ШАГ 4: Caching (из reusable workflow)
      - name: Configure Yarn Cache
        id: yarn-cache-dir-path
        # working-directory не применяется к этому шагу, так как он не 'run'
        run: echo "dir=$(yarn --cwd ./artifacts cache dir)" >> $GITHUB_OUTPUT

      - name: Initialize Yarn Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('./artifacts/yarn.lock') }}
          restore-keys: |
            yarn-

      # ШАГ 5: Get versions (из reusable workflow)
      - name: Get package version
        run: |
          echo "VERSION=$(yarn --silent pkg-version)" >> $GITHUB_ENV
          echo "WZD_VERSION=$(yarn --silent wzd-version)" >> $GITHUB_ENV
          echo "WZD_REVISION=$(yarn --silent wzd-revision)" >> $GITHUB_ENV

      # ШАГ 6: Get artifact name (из reusable workflow, убрали matrix)
      - name: Get artifact build name
        id: get-artifact-name
        run: |
          ARCH_SUFFIX=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "x64" || echo "arm64")
          echo "ARTIFACT_BUILD_NAME=wazuh-dashboard_${{ env.WZD_VERSION }}-${{ env.WZD_REVISION }}_${ARCH_SUFFIX}.tar.gz" >> $GITHUB_ENV
          
      # ШАГ 7: Bootstrap (из reusable workflow)
      - name: Run bootstrap
        run: yarn osd bootstrap

      # ШАГ 8: Build (из reusable workflow)
      - name: Build
        run: |
          BUILD_ARCH_FLAG=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "linux" || echo "linux-arm")
          yarn build-platform --${BUILD_ARCH_FLAG} --skip-os-packages --release

      # ШАГ 9: Rename artifact (из reusable workflow)
      - name: Rename artifact
        run: |
          ARCH_SUFFIX_OS=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "x64" || echo "arm64")
          mv ./target/opensearch-dashboards-${{ env.VERSION }}-linux-${ARCH_SUFFIX_OS}.tar.gz ./target/${{ env.ARTIFACT_BUILD_NAME }}

      # ШАГ 10: Upload artifact (из reusable workflow)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_BUILD_NAME }}
          path: ./artifacts/target/${{ env.ARTIFACT_BUILD_NAME }}
          retention-days: 30
          overwrite: true

      - name: Export artifact name as job output
        id: export-name
        run: echo "value=${{ env.ARTIFACT_BUILD_NAME }}" >> $GITHUB_OUTPUT
          
  build-main-plugins:
    needs: [prepare-refs, setup-variables]
    name: Build Main Plugins
    uses: ivmerk/wazuh-dashboard-plugins/.github/workflows/dev-environment.yml@master
    # Примечание: можно заменить @master на конкретный тег, например, @v4.8.0 для большей стабильности
    with:
      # Мы передаем в reusable workflow ту ветку, которую нужно собрать
      reference: ${{ needs.prepare-refs.outputs.wazuh_plugins_ref }}
      # Остальные параметры, которые ожидает dev-environment.yml
      command: 'yarn build'
      artifact_name: 'wazuh-dashboard-plugins'



  build-security-plugin:
    needs: [prepare-refs, setup-variables]
    name: Build Security Plugin
    uses: ivmerk/wazuh-security-dashboards-plugin/.github/workflows/dev-environment.yml@master
    with:
      # И здесь делаем то же самое
      reference: ${{ needs.prepare-refs.outputs.security_plugins_ref }}
      command: 'yarn build'
      artifact_name: 'wazuh-security-dashboards-plugin'
      artifact_path: 'wazuh-security-plugin/build'


  build-and-test-package:
    needs: [build-base, build-main-plugins, build-security-plugin]

    runs-on: ${{ (inputs.architecture == 'arm64' || inputs.architecture == 'aarch64') && 'wz-linux-arm64' || 'ubuntu-22.04' }}
    name: Generate packages
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Download dashboard artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_DASHBOARD_SLIM }}
          path: artifacts/dashboard

      - name: Download security plugin artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_SECURITY_PLUGIN }}
          path: artifacts/security-plugin

      - name: Download main plugin's artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_PLUGINS_WAZUH }}
          path: artifacts/plugins
      - name: Download core plugin's artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_PLUGINS_CORE }}
          path: artifacts/plugins
          
      - name: Download check update plugin's artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_PLUGINS_CHECK_UPDATES }}
          path: artifacts/plugins
      
      - name: Debug artifacts
        run: |
          echo "::group::Contents of artifacts/"
          ls -R artifacts
          echo "::endgroup::"

      - name: Prepare packages
        run: |
          echo "::group::Copying plugins and dashboard tar.gz"
          cp artifacts/plugins/*.zip artifacts/
          cp artifacts/security-plugin/*.zip artifacts/
    
          TAR=$(find artifacts/dashboard -type f -name 'wazuh-dashboard_*.tar.gz' | head -n 1)
          echo "Found: $TAR"
          cp "$TAR" artifacts/dashboard.tar.gz
          echo "::endgroup::"
      
      - name: Debug current dir contents
        run: |
          echo "Current DIR: ${{ needs.setup-variables.outputs.CURRENT_DIR }}"
          ls -al 
          ls -al dev-tools
          ls -al dev-tools/build-packages
          
      - name: Clone dev-tools
        run: |
          git clone --depth=1 https://github.com/ivmerk/wazuh-dashboard.git temp-dashboard
          cp -r temp-dashboard/dev-tools .
          
      - name: Copy deb-builder.sh and debian to Docker context
        run: |
          cp dev-tools/build-packages/deb/deb-builder.sh dev-tools/build-packages/deb/Docker/
          cp -r dev-tools/build-packages/deb/debian dev-tools/build-packages/deb/Docker/

      - name: Build package
        run: |
          cd dev-tools/build-packages
          bash ./build-packages.sh \
          -r ${{ inputs.revision }} ${{ needs.setup-variables.outputs.ARCHITECTURE_FLAG }} \
          -a file:///${{ github.workspace }}/artifacts/wazuh-*.zip \
          -s file:///${{ github.workspace }}/artifacts/security-dashboards-*.zip \
          -b file:///${{ github.workspace }}/artifacts/dashboard.tar.gz \
          --commit-sha ${{needs.setup-variables.outputs.COMMIT_SHA}}-${{needs.setup-variables.outputs.PLUGINS_SHA}}-${{needs.setup-variables.outputs.SECURITY_SHA}} \
          --${{ inputs.system }} ${{ needs.setup-variables.outputs.PRODUCTION }} --debug

      - name: Test package
        run: |
          cd dev-tools/test-packages
          ls -laR ${{ github.workspace }}/dev-tools/build-packages/output
          cp ../build-packages/output/${{needs.setup-variables.outputs.PACKAGE_NAME}}  ${{ needs.setup-variables.outputs.CURRENT_DIR }}/dev-tools/test-packages/${{ inputs.system }}
          bash ./test-packages.sh \
            -p ${{needs.setup-variables.outputs.PACKAGE_NAME}}

      
      - name: Move generated package to artifacts folder
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/output
          # Мы должны искать пакет относительно корня воркспейса
          mv ${{ github.workspace }}/dev-tools/build-packages/output/*.deb ${{ github.workspace }}/artifacts/output/ || true
          mv ${{ github.workspace }}/dev-tools/build-packages/output/*.rpm ${{ github.workspace }}/artifacts/output/ || true

      - name: List target artifacts
        run: |
          ls -lh ${{ github.workspace }}/artifacts/
          ls -lh ${{ github.workspace }}/artifacts/output/
      
      - name: Upload final package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.PACKAGE_NAME }}
          path: ${{ github.workspace }}/artifacts/output/${{ needs.setup-variables.outputs.PACKAGE_NAME }}
          retention-days: 30
          overwrite: true
