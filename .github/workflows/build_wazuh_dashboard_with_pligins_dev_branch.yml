name: Build Wazuh dashboard with plugins dev branch

on:
  workflow_dispatch:
    inputs:
      reference_dashboard:
        type: string
        description: 'Branch/tag of wazuh-dashboard repo. If empty, uses the branch this workflow is on.'
        required: false
      reference_security_plugins:
        type: string
        description: 'Branch/tag/commit of wazuh-security-dashboards-plugin. If empty, uses master.'
        required: false
      reference_wazuh_plugins:
        type: string
        description: 'Branch/tag/commit of wazuh-dashboard-plugins. If empty, uses master.'
        required: false
      system:
        type: choice
        description: 'Package OS'
        required: true
        options: [deb, rpm]
        default: 'deb'
      architecture:
        description: 'Architecture (amd64 or arm64)'
        required: true
        default: 'amd64'
      revision:
        type: string
        description: 'Package revision'
        required: true
        default: '1'
      is_stage:
        type: boolean
        description: 'Set production nomenclature'
        required: true
        default: false
      checksum:
        type: boolean
        description: 'Generate package checksum'
        required: true
        default: false
      id:
        description: 'ID used to identify the workflow uniquely.'
        type: string
        required: false

jobs:
  prepare-refs:
   runs-on: ubuntu-latest
   name: Prepare References
   outputs:
     dashboard_ref: ${{ steps.set-refs.outputs.dashboard_ref }}
     wazuh_plugins_ref: ${{ steps.set-refs.outputs.wazuh_plugins_ref }}
     security_plugins_ref: ${{ steps.set-refs.outputs.security_plugins_ref }}
   steps:
     - name: Set effective refs
       id: set-refs
       run: |
         echo "dashboard_ref=${{ inputs.reference_dashboard || github.ref_name }}" >> $GITHUB_OUTPUT
         echo "wazuh_plugins_ref=${{ inputs.reference_wazuh_plugins || 'master' }}" >> $GITHUB_OUTPUT
         echo "security_plugins_ref=${{ inputs.reference_security_plugins || 'master' }}" >> $GITHUB_OUTPUT

  setup-variables:
    needs: prepare-refs
    runs-on: ubuntu-latest
    name: Setup variables
    outputs:
      CURRENT_DIR: ${{ steps.setup-variables.outputs.CURRENT_DIR }}
      VERSION: ${{ steps.setup-variables.outputs.VERSION }}
      REVISION: ${{ steps.setup-variables.outputs.REVISION }}
      COMMIT_SHA: ${{ steps.setup-variables.outputs.COMMIT_SHA }}
      PLUGINS_SHA: ${{ steps.setup-variables.outputs.PLUGINS_SHA }}
      SECURITY_SHA: ${{ steps.setup-variables.outputs.SECURITY_SHA }}
      PRODUCTION: ${{ steps.setup-variables.outputs.PRODUCTION }}
      WAZUH_DASHBOARD_SLIM: ${{ steps.setup-variables.outputs.WAZUH_DASHBOARD_SLIM }}
      WAZUH_SECURITY_PLUGIN: ${{ steps.setup-variables.outputs.WAZUH_SECURITY_PLUGIN }}
      WAZUH_PLUGINS_WAZUH: ${{ steps.setup-variables.outputs.WAZUH_PLUGINS_WAZUH }}
      WAZUH_PLUGINS_CORE: ${{ steps.setup-variables.outputs.WAZUH_PLUGINS_CORE }}
      WAZUH_PLUGINS_CHECK_UPDATES: ${{ steps.setup-variables.outputs.WAZUH_PLUGINS_CHECK_UPDATES }}
      PACKAGE_NAME: ${{ steps.setup-variables.outputs.PACKAGE_NAME }}
      ARCHITECTURE_FLAG: ${{ steps.setup-variables.outputs.ARCHITECTURE_FLAG }}

    steps:
      - name: Checkout dashboard repo
        uses: actions/checkout@v4
        with:
          repository: ivmerk/wazuh-dashboard
          ref: ${{ needs.prepare-refs.outputs.dashboard_ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Get SHA of wazuh-dashboard-plugins
        id: get-plugins-sha
        run: |
          git clone -b ${{ inputs.reference_wazuh_plugins }} --single-branch https://github.com/ivmerk/wazuh-dashboard-plugins.git wzdp
          cd wzdp
          echo "WAZUH_PLUGINS_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get SHA of wazuh-security-dashboards-plugin
        id: get-security-sha
        run: |
          git clone -b ${{ inputs.reference_security_plugins }} --single-branch https://github.com/ivmerk/wazuh-security-dashboards-plugin.git wzsp
          cd wzsp
          echo "WAZUH_SECURITY_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup variables
        id: setup-variables
        run: |
          CURRENT_DIR=$(pwd -P)
          VERSION=$(jq -r '.version' VERSION.json)
          REVISION=$(jq -r '.stage' VERSION.json)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          PLUGINS_SHA=${{ steps.get-plugins-sha.outputs.WAZUH_PLUGINS_SHA }}
          SECURITY_SHA=${{ steps.get-security-sha.outputs.WAZUH_SECURITY_SHA }}

          if [ "${{ inputs.is_stage }}" = "true" ]; then
            PRODUCTION=--production
          else
            PRODUCTION=""
          fi

          ARCH_SHORT=$([[ "${{ inputs.ARCHITECTURE }}" == "x86_64" || "${{ inputs.ARCHITECTURE }}" == "amd64" ]] && echo "x64" || echo "arm64")

          WAZUH_DASHBOARD_SLIM=wazuh-dashboard_${VERSION}-${REVISION}_${ARCH_SHORT}.tar.gz
          WAZUH_SECURITY_PLUGIN=wazuh-security-dashboards-plugin_${VERSION}-${REVISION}_$(echo ${{ inputs.reference_security_plugins }} | sed 's/\//-/g').zip
          WAZUH_PLUGINS_WAZUH=wazuh-dashboard-plugins_wazuh_${VERSION}-${REVISION}_$(echo ${{ inputs.reference_wazuh_plugins }} | sed 's/\//-/g').zip
          WAZUH_PLUGINS_CORE=wazuh-dashboard-plugins_wazuh-core_${VERSION}-${REVISION}_$(echo ${{ inputs.reference_wazuh_plugins }} | sed 's/\//-/g').zip
          WAZUH_PLUGINS_CHECK_UPDATES=wazuh-dashboard-plugins_wazuh-check-updates_${VERSION}-${REVISION}_$(echo ${{ inputs.reference_wazuh_plugins }} | sed 's/\//-/g').zip

          if [ "${{ inputs.system }}" = "deb" ]; then
            if [ "${{ inputs.is_stage }}" = "true" ]; then
              PACKAGE_NAME=wazuh-dashboard_${VERSION}-${{ inputs.revision }}_${{ inputs.architecture }}.deb
            else
              PACKAGE_NAME=wazuh-dashboard_${VERSION}-${{ inputs.revision }}_${{ inputs.architecture }}_${COMMIT_SHA}-${PLUGINS_SHA}-${SECURITY_SHA}.deb
            fi
          else
            if [ "${{ inputs.is_stage }}" = "true" ]; then
              PACKAGE_NAME=wazuh-dashboard-${VERSION}-${{ inputs.revision }}.${{ inputs.architecture }}.rpm
            else
              PACKAGE_NAME=wazuh-dashboard_${VERSION}-${{ inputs.revision }}_${{ inputs.architecture }}_${COMMIT_SHA}-${PLUGINS_SHA}-${SECURITY_SHA}.rpm
            fi
          fi

          if [[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]]; then
            ARCHITECTURE_FLAG=""
          else
            ARCHITECTURE_FLAG=--arm
          fi

          echo "CURRENT_DIR=$CURRENT_DIR" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "REVISION=$REVISION" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "PLUGINS_SHA=$PLUGINS_SHA" >> $GITHUB_OUTPUT
          echo "SECURITY_SHA=$SECURITY_SHA" >> $GITHUB_OUTPUT
          echo "PRODUCTION=$PRODUCTION" >> $GITHUB_OUTPUT
          echo "WAZUH_DASHBOARD_SLIM=$WAZUH_DASHBOARD_SLIM" >> $GITHUB_OUTPUT
          echo "WAZUH_SECURITY_PLUGIN=$WAZUH_SECURITY_PLUGIN" >> $GITHUB_OUTPUT
          echo "WAZUH_PLUGINS_WAZUH=$WAZUH_PLUGINS_WAZUH" >> $GITHUB_OUTPUT
          echo "WAZUH_PLUGINS_CORE=$WAZUH_PLUGINS_CORE" >> $GITHUB_OUTPUT
          echo "WAZUH_PLUGINS_CHECK_UPDATES=$WAZUH_PLUGINS_CHECK_UPDATES" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "ARCHITECTURE_FLAG=$ARCHITECTURE_FLAG" >> $GITHUB_OUTPUT

  validate-job:
    runs-on: ubuntu-latest
    needs: setup-variables
    name: Validate inputs
    steps:
      - name: Validate inputs
        run: |
          if [[ "${{ inputs.architecture }}" == "amd64" || "${{ inputs.architecture }}" == "arm64" ]] && [[ "${{ inputs.system }}" == "rpm" ]]; then
            echo "Invalid combination of architecture and system"
            exit 1
          fi
          if [[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "aarch64" ]] && [[ "${{ inputs.system }}" == "deb" ]]; then
            echo "Invalid combination of architecture and system"
            exit 1
          fi

  build-base:
    needs: [validate-job, prepare-refs]
    name: Build dashboard
# Используем правильный runner, как в вашем основном workflow
    runs-on: ${{ (inputs.architecture == 'arm64' || inputs.architecture == 'aarch64') && 'wz-linux-arm64' || 'ubuntu-22.04' }}
    defaults:
      run:
        working-directory: ./artifacts # Устанавливаем рабочую директорию для всех шагов run

    steps:
      # ШАГ 1: Checkout (из reusable workflow)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ivmerk/wazuh-dashboard
          path: ./artifacts # Клонируем в поддиректорию
          ref: ${{ needs.prepare-refs.outputs.dashboard_ref }} # Используем динамическую ветку

      # ШАГ 2: Setup Node (из reusable workflow)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: './artifacts/.nvmrc' # Путь к файлу теперь включает поддиректорию
          registry-url: 'https://registry.npmjs.org'

      # ШАГ 3: Setup Yarn (из reusable workflow)
      - name: Setup Yarn
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10
          yarn config set network-timeout 1000000 -g

      # ШАГ 4: Caching (из reusable workflow)
      - name: Configure Yarn Cache
        id: yarn-cache-dir-path
        # working-directory не применяется к этому шагу, так как он не 'run'
        run: echo "dir=$(yarn --cwd ./artifacts cache dir)" >> $GITHUB_OUTPUT

      - name: Initialize Yarn Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('./artifacts/yarn.lock') }}
          restore-keys: |
            yarn-

      # ШАГ 5: Get versions (из reusable workflow)
      - name: Get package version
        run: |
          echo "VERSION=$(yarn --silent pkg-version)" >> $GITHUB_ENV
          echo "WZD_VERSION=$(yarn --silent wzd-version)" >> $GITHUB_ENV
          echo "WZD_REVISION=$(yarn --silent wzd-revision)" >> $GITHUB_ENV

      # ШАГ 6: Get artifact name (из reusable workflow, убрали matrix)
      - name: Get artifact build name
        run: |
          ARCH_SUFFIX=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "x64" || echo "arm64")
          echo "ARTIFACT_BUILD_NAME=wazuh-dashboard_${{ env.WZD_VERSION }}-${{ env.WZD_REVISION }}_${ARCH_SUFFIX}.tar.gz" >> $GITHUB_ENV

      # ШАГ 7: Bootstrap (из reusable workflow)
      - name: Run bootstrap
        run: yarn osd bootstrap

      # ШАГ 8: Build (из reusable workflow)
      - name: Build
        run: |
          BUILD_ARCH_FLAG=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "linux" || echo "linux-arm")
          yarn build-platform --${BUILD_ARCH_FLAG} --skip-os-packages --release

      # ШАГ 9: Rename artifact (из reusable workflow)
      - name: Rename artifact
        run: |
          ARCH_SUFFIX_OS=$([[ "${{ inputs.architecture }}" == "x86_64" || "${{ inputs.architecture }}" == "amd64" ]] && echo "x64" || echo "arm64")
          mv ./target/opensearch-dashboards-${{ env.VERSION }}-linux-${ARCH_SUFFIX_OS}.tar.gz ./target/${{ env.ARTIFACT_BUILD_NAME }}

      # ШАГ 10: Upload artifact (из reusable workflow)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_BUILD_NAME }}
          path: ./artifacts/target/${{ env.ARTIFACT_BUILD_NAME }}
          retention-days: 30
          overwrite: true

  build-main-plugins:
    needs: [validate-job]
    name: Build plugins
    uses: ivmerk/wazuh-dashboard-plugins/.github/workflows/manual-build.yml@master
    with:
      reference: ${{ inputs.reference_wazuh_plugins }}

  build-security-plugin:
    needs: [validate-job]
    name: Build security plugin
    uses: ivmerk/wazuh-security-dashboards-plugin/.github/workflows/manual-build.yml@master
    with:
      reference: ${{ inputs.reference_security_plugins }}

  build-and-test-package:
    needs: [setup-variables, build-main-plugins, build-base, build-security-plugin]
    runs-on: ${{ (inputs.architecture == 'arm64' || inputs.architecture == 'aarch64') && 'wz-linux-arm64' || 'ubuntu-22.04' }}
    name: Generate packages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.reference_dashboard }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Download dashboard artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_DASHBOARD_SLIM }}
          path: ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/dashboard

      - name: Download security plugin artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_SECURITY_PLUGIN }}
          path: ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/security-plugin

      - name: Download main plugin's artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_PLUGINS_WAZUH }}
          path: ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/plugins
      - name: Download core plugin's artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_PLUGINS_CORE }}
          path: ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/plugins
      - name: Download check update plugin's artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.WAZUH_PLUGINS_CHECK_UPDATES }}
          path: ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/plugins

      - name: Debug artifacts
        run: |
          echo "::group::Contents of artifacts/"
          ls -R ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts
          echo "::endgroup::"

      - name: Zip plugins
        run: |
          zip -r -j ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/wazuh-package.zip ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/plugins
          zip -r -j ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/security-package.zip ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/security-plugin
          zip -r -j ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/dashboard-package.zip ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/dashboard/

      - name: Debug current dir contents
        run: |
          echo "Current DIR: ${{ needs.setup-variables.outputs.CURRENT_DIR }}"
          ls -al ${{ needs.setup-variables.outputs.CURRENT_DIR }}
          ls -al ${{ needs.setup-variables.outputs.CURRENT_DIR }}/dev-tools

      - name: Build package
        run: |
          cd ${{ needs.setup-variables.outputs.CURRENT_DIR }}/dev-tools/build-packages
          bash ./build-packages.sh \
            -r ${{ inputs.revision }} ${{ needs.setup-variables.outputs.ARCHITECTURE_FLAG }} \
            -a file://${{needs.setup-variables.outputs.CURRENT_DIR}}/artifacts/wazuh-package.zip \
            -s file://${{needs.setup-variables.outputs.CURRENT_DIR}}/artifacts/security-package.zip \
            -b file://${{needs.setup-variables.outputs.CURRENT_DIR}}/artifacts/dashboard-package.zip \
            --commit-sha ${{needs.setup-variables.outputs.COMMIT_SHA}}-${{needs.setup-variables.outputs.PLUGINS_SHA}}-${{needs.setup-variables.outputs.SECURITY_SHA}} \
            --${{ inputs.system }} ${{ needs.setup-variables.outputs.PRODUCTION }} --debug

      - name: Export variables to env
        run: |
          echo "VERSION=${{ needs.setup-variables.outputs.VERSION }}" >> $GITHUB_ENV
          echo "ARTIFACT_BUILD_NAME=${{ needs.setup-variables.outputs.PACKAGE_NAME }}" >> $GITHUB_ENV

      - name: Move generated package to artifacts folder
        run: |
          mkdir -p ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/output
          mv ${{ needs.setup-variables.outputs.CURRENT_DIR }}/dev-tools/build-packages/output/*.deb ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/output/ || true
          mv ${{ needs.setup-variables.outputs.CURRENT_DIR }}/dev-tools/build-packages/output/*.rpm ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/output/ || true

      - name: List target artifacts
        run: |
            ls -lh ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/
            ls -lh ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/output/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.setup-variables.outputs.PACKAGE_NAME }}
          path: ${{ needs.setup-variables.outputs.CURRENT_DIR }}/artifacts/output/${{ needs.setup-variables.outputs.PACKAGE_NAME }}
          retention-days: 30
          overwrite: true
